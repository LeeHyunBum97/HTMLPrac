<form action = "데이터를 전송받을 서버 URL" method="요청방식" enctype="multipart/form-data"> </form>

action은 생략하면 요청한 URL 현재 주소, method는 생략하면 get이 기본값

http 메서드에 대응 되는 폼 메서드 종류 -> 모든 메서드로 같은작업 가능하지만 RESTFUL을 지키기 위해서 대응되는 메서드를 권장한다

GET : 데이터를 URL에 붙여서 전송하는 방식으로 조회할 때 사용 READ
      데이터가 URL에 노출 되어 있기 때문에 보안성이 취약하고 데이터 길이에 제한이 있지만,
      자동 재전송 기능이 있기 때문에 서버나 네트워크가 일시적으로 사용 중지 되었다가 복구되는 경우 자동으로 전송되는 경우가 있어서
      읽기 기능에서만 사용한다.
      즉, READ작업에서는 동시에 처리를해도 상관 없지만 CREATE, DELETE, UPDATE작업을 동시에 하는 경우 매우 심각한 시스템 문제 발생
      예를 들어서 은행에서 ATM과 휴대폰으로 잔액조회를 동시에 진행할 수 있지만 입/출금은 데이터를 건드리는 것으로 악용가능하기 때문
      -> 그래서 데이터 접근에 대한 작업을 구분할 필요가 있음 CRUD의 RESTFUL 지향

POST : 데이터를 헤더에 숨겨서 전송하는 방식으로 예전에는 READ를 제외한 모든작업에 사용했는데 지금은 삽입에만 사용하는 것을 권장 CREATE
       숨겨서 전송되기 때문에 보안성이 뛰어남 URL에 포함되지 않고 길이에 제한이 없음
       개인정보나 보안사항을 전송할 때는 항상 POST 또는 PUT을 사용

PUT : 전송방법은 POST와 동일하나 전체 데이터를 수정하는데 사용한다 UPDATE
PATCH : 전송방법은 POST와 동일하나 일부 데이터를 수정하는데 사용한다 UPDATE
DELETE : 전송방법은 GET과 동일하나 데이터 삭제에 사용한다 DELETE

OPTIONS : 리소스가 지원하고 있는 메서드 취득
HEAD : 서버 리소스의 헤더
CONNECT : 프록시 동작의 터널 접속을 변경

enctype : 보통은 설정하지 않아도 되며 파일을 전송하고자 하는 경우에만 multipart/form-data로 설정하면 된다
          기본값은 application/x-www-form-urlencoded(인코딩해서 전송)이다.
          multipart/form-data옵션이 중요한 이유는 매우 큰 데이터를 잘라서 보내는데 잘려진 데이터에 번호표를 주어서 데이터가
          여러 패킷으로 나뉘어 서로 다른 경로로 출발해  목적지에 도착시 패킷 재조립에 매우 효율적이기 때문이다.

